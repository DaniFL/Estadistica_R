p_value = 1 - pf(1.33, 15, 9)
p_value
datos_a = rnorm(16, 0, sqrt(24))
datos_b = rnorm(10, 0, sqrt(18))
var.test(datos_a, datos_b, ratio = 1, alternative = "two.sided", conf.level = 0.98)
p_value
# Ha: var_b > 2 * var_a --> var_b / var_a > 2
# Ha:var_a / var_b < 0.5
var.test(datos_b, datos_a, ratio = 2, alternative = "greater", conf.level = 0.98)
# P-valor
p_value = 1 - pf(1.333, 15, 9)
p_value
var.test(datos_a, datos_b, ratio = 1, alternative = "two.sided", conf.level = 0.98)
?rnorm
# Estandarización datos ==>  media = 0, desviación tipica de 1
datos_a = (datos_a - mean(datos_a)) / sd(datos_a)
datos_a
datos_a = rnorm(16)
datos_a = (datos_a - mean(datos_a)) / sd(datos_a)
sd(datos_a)
mean(datos_a)
datos_a = datos_a * sqrt(24) + 3
mean(datos_a)
datos_a = rnorm(16)
datos_a = (datos_a - mean(datos_a)) / sd(datos_a)
datos_a = datos_a * sqrt(24) + 3
datos_b = rnorm(10)
datos_b = (datos_b - mean(datos_b)) / sd(datos_b)
datos_b = datos_b * sqrt(18) + 3
var.test(datos_a, datos_b, ratio = 1, alternative = "two.sided", conf.level = 0.98)
datos_a = rnorm(16, 0, sqrt(24))
datos_b = rnorm(10, 0, sqrt(18))
var.test(datos_a, datos_b, ratio = 1, alternative = "two.sided", conf.level = 0.98)
datos_a = rnorm(16)
datos_a = (datos_a - mean(datos_a)) / sd(datos_a)
datos_a = datos_a * sqrt(24) + 3
datos_b = rnorm(10)
datos_b = (datos_b - mean(datos_b)) / sd(datos_b)
datos_b = datos_b * sqrt(18) + 3
var.test(datos_a, datos_b, ratio = 1, alternative = "two.sided", conf.level = 0.98)
library(readr)
spain_league <- read_csv("Intervalos_Conf/parte_4/data_4/spain_league.csv")
View(spain_league)
knitr::opts_chunk$set(echo = TRUE)
sp_league = spain_league[spain_league$season == 2021, ]
sp_league = spain_league[spain_league$season == "2021", ]
library(readr)
spain_league <- read_csv("Intervalos_Conf/parte_4/data_4/spain_league.csv")
sp_league = spain_league[spain_league$season == "2021", ]
sp_league
View(sp_league)
sp_league = spain_league[spain_league$season == 2021, ]
sp_league = spain_league[spain_league$Season == 2021, ]
View(sp_league)
sp_league = sp_league[sp_league$hgoal == 1, ]
View(sp_league)
goles = sp_league$hgoal
goles
sp_league = spain_league[spain_league$Season == 2021, ]
goles = sp_league$hgoal
goles
hist(goles, col = "lightblue")
lambda_estimation = mean(goles)
hist(goles, col = "lightblue")
abline(lambda_estimation = mean(goles))
error = qnorm(0.01) * sqrt(lambda_estimation/length(goles))
lambda_estimation = mean(goles)
error = qnorm(0.01) * sqrt(lambda_estimation/length(goles))
ic = c(lambda_estimation - error, lambda_estimation + error)
ic
ic = c(lambda_estimation + error, lambda_estimation - error)
knitr::opts_chunk$set(echo = TRUE)
barplot(table(goles), col = "lightblue")
ggplot(sp_league , aes(x = hgoal)) +
geom_histogram(binwidth = 1, fill = "lightblue") +
geom_vline(xintercept = ic[1], color = "red") +
geom_vline(xintercept = ic[2], color = "red")
library(ggplot2)
ggplot(sp_league , aes(x = hgoal)) +
geom_histogram(binwidth = 1, fill = "lightblue") +
geom_vline(xintercept = ic[1], color = "red") +
geom_vline(xintercept = ic[2], color = "red")
ggplot(sp_league , aes(x = goles)) +
geom_histogram(binwidth = 1, fill = "lightblue")
ggplot(sp_league , aes(x = goles)) +
geom_bar()
ggplot(sp_league , aes(x = goles)) +
geom_bar(fill = "lightblue")
ggplot(sp_league , aes(x = goles)) +
geom_bar(col = "lightblue")
ggplot(sp_league , aes(x = goles)) +
geom_bar(fill = "lightblue", col = "black")
library(readr)
juries <- read_csv("Intervalos_Conf/parte_4/data_4/juries.csv")
View(juries)
juries$race = as.factor(juries$race)
View(juries)
juries
hist(juries$race, col = "lightblue")
hist(juries$race, juries$id, col = "lightblue")
hist(juries$id, juries$race, col = "lightblue")
ggplot(juries, aes(x = juries$race)) +
geom_bar(fill = "lightblue", col = "black")
ggplot(juries, aes(x = juries$race, fill = race)) +
geom_bar(fill = "lightblue", col = "black")
ggplot(juries, aes(x = juries$race, fill = juries$race)) +
geom_bar(fill = "lightblue", col = "black")
ggplot(juries, aes(x = juries$race, fill = juries$race)) +
geom_bar()
ggplot(juries, aes(x = race, fill = race)) +
geom_bar()
# Ha: p < 0.5
binom.test(sum(juries$race == "afromerican"),
length(juries$race),
p = 0.5,
alternative = "less")
# Ha: p < 0.5
binom.test(afro,
length(juries$race),
p = 0.5,
alternative = "less")
afro = sum(juries$race == "afromerican")
# Ha: p < 0.5
binom.test(afro,
length(juries$race),
p = 0.5,
alternative = "less")
tabla = table(juries$race)
n_afro = tabla["afromerican"]
# Ha: p < 0.5
binom.test(afro,
length(juries$race),
p = 0.5,
alternative = "less")
# Ha: p < 0.5
binom.test(n_afro,
length(juries$race),
p = 0.5,
alternative = "less")
tabla = table(juries$race)
n_afro = tabla["afromerican"]
# Ha: p < 0.5
binom.test(n_afro,
length(juries$race),
p = 0.5,
alternative = "less")
n_afro
tabla = table(juries$race)
tabla
afro = sum(juries$race == "afroamerican")
tabla = table(juries$race)
n_afro = tabla["afroamerican"]
# Ha: p < 0.5
binom.test(n_afro,
length(juries$race),
p = 0.5,
alternative = "less")
library(readr)
ab_testing <- read_csv("Intervalos_Conf/parte_4/data_4/ab_testing.csv")
View(ab_testing)
ab_testing$page_design = as.factor(ab_testing$page_design)
ab_testing$has_clicked = as.factor(ab_testing$has_clicked)
ab_testing
ggplot(ab_testing, aes(x = has_clicked, fill = has_clicked)) +
geom_bar(position = "fill")
ggplot(ab_testing, aes(x = has_clicked, fill = has_clicked)) +
geom_bar()
ggplot(ab_testing, aes(x = page_design, fill = has_clicked)) +
geom_bar()
ggplot(ab_testing, aes(x = page_design, fill = has_clicked)) +
geom_bar(position = "fill")
ggplot(ab_testing, aes(x = page_design, fill = has_clicked)) +
geom_bar(position = "stack")
ggplot(ab_testing, aes(x = page_design, fill = has_clicked)) +
geom_bar(position = "dodge")
ggplot(ab_testing, aes(x = page_design, fill = has_clicked)) +
geom_bar(position = "identity") # stack, dodge , fill, jiter, identity
ggplot(ab_testing, aes(x = page_design, fill = has_clicked)) +
geom_bar(position = "fill") # stack, dodge , fill, jiter, identity
tabla2 = table(ab_testing$page_design, ab_testing$has_clicked)
clik  = tabla2[1, 2]
clik
n = rowSums(tabla2)
n
clik
clik  = tabla2[, 2]
tabla2 = table(ab_testing$page_design, ab_testing$has_clicked)
clik  = tabla2[, 2]
n = rowSums(tabla2)
prop.test(clik, n, alternative = "less")
prop.test(clik, n, alternative = "greater")
prop.test(clik, n, alternative = "greater")
install.packages(
c("easystats", "GGally", "qqplotr")
)
install.packages(c("easystats", "GGally", "qqplotr"))
install.packages(c("easystats", "GGally", "qqplotr"))
install.packages(c("easystats", "GGally", "qqplotr"))
library("easystats")
library("tidyverse")
library("tidyverse")
library("readr")
theme_set(theme_bw())  # cambia el tema de ggplot
age = seq(0, 12, 0.1)
# No todos los niños de la misma edad miden lo mismo. El término a + b * edad
# debe interpretarse como una altura media...
mean_height = 50 + 6.5 * age
# ... en torno a la cuál habrá fluctuaciones estadísticas que podemos asumir normales.
epsilon = rnorm(length(mean_height), sd = 5)
height = mean_height + epsilon
plot(age. mean_height)
plot(age, mean_height)
df = data.frame(
'age' = age,
'height' = height,
'mean_height' = mean_height
)
ggplot(df, aes(x = age, y = height)) +
geom_point() +
geom_line(aes(y = mean_height), col = 2)
library("tidyverse")
library("readr")
library("tidyverse")
library("ggplot2")
ggplot(df, aes(x = age, y = height)) +
geom_point() +
geom_line(aes(y = mean_height), col = 2)
# 1) crear un modelo lineal... Interpretaremos la fórmula del modelo líneal como
# una forma de preguntar se "la altura depende de la edad".
naive_model = lm(height ~ age, data = df)
# 2) obtener estimaciones de a y b
summary(naive_model)
print(naive_model)
# 3) Obtener predicciones del modelo lineal
preds = predict(naive_model, interval = "confidence")
preds
# 4) visualizar el ajuste
data_and_preds = bind_cols(df, preds)
data_and_preds = bind_cols(df, preds)
data_and_preds = bind_cols(df, preds)
install.packages(
c("easystats", "GGally", "qqplotr")
)
library("easystats")
library("tidyverse")
library("readr")
theme_set(theme_bw())  # cambia el tema de ggplot
age = seq(0, 12, 0.1)
# No todos los niños de la misma edad miden lo mismo. El término a + b * edad
# debe interpretarse como una altura media...
mean_height = 50 + 6.5 * age
# ... en torno a la cuál habrá fluctuaciones estadísticas que podemos asumir normales.
epsilon = rnorm(length(mean_height), sd = 5)
height = mean_height + epsilon
df = data.frame(
'age' = age,
'height' = height,
'mean_height' = mean_height
)
library("ggplot2")
ggplot(df, aes(x = age, y = height)) +
geom_point() +
geom_line(aes(y = mean_height), col = 2)
# OR...
# plot(x, y)
# lines(x, expected_behaviour, col = 2)
# 1) crear un modelo lineal... Interpretaremos la fórmula del modelo líneal como
# una forma de preguntar se "la altura depende de la edad".
naive_model = lm(height ~ age, data = df)
# 2) obtener estimaciones de a y b
summary(naive_model)
# 3) Obtener predicciones del modelo lineal
preds = predict(naive_model, interval = "confidence")
# 4) visualizar el ajuste
data_and_preds = bind_cols(df, preds)
ggplot(data_and_preds, aes(x = age)) +
geom_point(aes(y = height)) +
geom_line(aes(y = mean_height, col = "Expected")) +
geom_line(aes(y = fit, col = "Predicted")) +
geom_ribbon(aes(ymin = lwr, ymax = upr), alpha = 0.2, fill = "black")
ggplot(df, aes(x = age, y = height)) +
geom_point()
geom_smooth(method = "lm")
ggplot(df, aes(x = age, y = height)) +
geom_point()
geom_smooth()
ggplot(df, aes(x = age, y = height)) +
geom_point()+
geom_smooth()
ggplot(df, aes(x = age, y = height)) +
geom_point()+
geom_smooth(method = "lm")
ggplot(df, aes(x = age, y = height)) +
geom_point()+
geom_smooth(method = "lm")
# 1) leer los datos
frog = read.csv("data/hr.csv")
library(readr)
hr <- read_csv("regression/data/hr.csv",
col_types = cols(`temperature heart_rate` = col_character()))
View(hr)
# 1) leer los datos
library(readr)
frog = read.csv("data/hr.csv")
frog = read.csv("regression/data/hr.csv")
# 2) Crear un modelo lineal
frog_model = lm(heart_rate ~ temperature, data = frog)
frog = read.csv("regression/data/hr.csv")
# 2) Crear un modelo lineal
frog_model = lm(frog$heart_rate ~ frog$temperature, data = frog)
frog
library(readr)
hr <- read_table("regression/data/hr.csv")
View(hr)
# 2) Crear un modelo lineal
frog_model = lm(frog$heart_rate ~ frog$temperature, data = frog)
frog = read.csv("regression/data/hr.csv")
# 2) Crear un modelo lineal
frog_model = lm(frog$heart_rate ~ frog$temperature, data = frog)
library(readr)
hr <- read_table("regression/data/hr.csv")
View(hr)
# 2) Crear un modelo lineal
frog_model = lm(hr$heart_rate ~ hr$temperature, data = frog)
# 2) Crear un modelo lineal
frog_model = lm(heart_rate ~ temperature, data = frog)
# 3) Inferencia
summary(frog_model)
# 2) Crear un modelo lineal
frog_model = lm(hr$heart_rate ~ hr$temperature, data = hr)
# 3) Inferencia
summary(frog_model)
View(hr)
# 2) Crear un modelo lineal
frog_model = lm(heart_rate ~ temperature, data = hr)
# 3) Inferencia
summary(frog_model)
ggplot(hr, aes(x = temperature, y = heart_rate)) +
geom_point() +
geom_smooth(method = "lm") +
labs(title = "Frecuencia cardíaca en función de la temperatura",
subtitle = "Datos de la rana leopardo, Rana pipiens",
x = "Temperatura (ºC)",
y = "Frecuencia cardíaca (pulsaciones por minuto)")
set.seed(123)  # Establecer una semilla para reproducibilidad
ingreso_inicial <- 2  # Ingreso inicial en millones de euros
tasa_crecimiento <- 0.30  # Tasa de crecimiento anual del 30%
num_anios <- 5  # Número de años
# Crear el vector de ingresos
ingresos <- cumprod(c(ingreso_inicial, rep(1 + tasa_crecimiento, num_anios - 1)))
# Mostrar el vector de ingresos
print(ingresos)
# Instalar y cargar la biblioteca ggplot2
install.packages("ggplot2")
library(ggplot2)
# Crear un data frame con los datos
datos <- data.frame(Año = seq(2023, 2023 + num_anios - 1), Ingresos = ingresos)
# Crear la gráfica de barras
ggplot(datos, aes(x = factor(Año), y = Ingresos, fill = factor(Año))) +
geom_bar(stat = "identity", color = "black", position = "dodge") +
labs(title = "Ingresos Anuales Proyectados",
x = "Año",
y = "Ingresos (Millones de Euros)") +
theme_minimal()
library(ggplot2)
# Crear un data frame con los datos
datos <- data.frame(Año = seq(2023, 2023 + num_anios - 1), Ingresos = ingresos)
# Crear la gráfica de barras
ggplot(datos, aes(x = factor(Año), y = Ingresos, fill = factor(Año))) +
geom_bar(stat = "identity", color = "black", position = "dodge") +
labs(title = "Ingresos Anuales Proyectados",
x = "Año",
y = "Ingresos (Millones de Euros)") +
theme_minimal()
set.seed(123)  # Establecer una semilla para reproducibilidad
ingreso_inicial <- 1  # Ingreso inicial en millones de euros
tasa_crecimiento <- 0.30  # Tasa de crecimiento anual del 30%
num_anios <- 5  # Número de años
# Crear el vector de ingresos
ingresos <- cumprod(c(ingreso_inicial, rep(1 + tasa_crecimiento, num_anios - 1)))
# Mostrar el vector de ingresos
print(ingresos)
# Instalar y cargar la biblioteca ggplot2
install.packages("ggplot2")
library(ggplot2)
# Crear un data frame con los datos
datos <- data.frame(Año = seq(2023, 2023 + num_anios - 1), Ingresos = ingresos)
# Crear la gráfica de barras
ggplot(datos, aes(x = factor(Año), y = Ingresos, fill = factor(Año))) +
geom_bar(stat = "identity", color = "black", position = "dodge") +
labs(title = "Ingresos Anuales Proyectados",
x = "Año",
y = "Ingresos (Millones de Euros)") +
theme_minimal()
set.seed(123)  # Establecer una semilla para reproducibilidad
ingreso_inicial <- 1  # Ingreso inicial en millones de euros
tasa_crecimiento <- 0.30  # Tasa de crecimiento anual del 30%
num_anios <- 5  # Número de años
# Crear el vector de ingresos
ingresos <- cumprod(c(ingreso_inicial, rep(1 + tasa_crecimiento, num_anios - 1)))
# Mostrar el vector de ingresos
print(ingresos)
# Instalar y cargar la biblioteca ggplot2
install.packages("ggplot2")
library(ggplot2)
# Crear un data frame con los datos
datos <- data.frame(Año = seq(2023, 2023 + num_anios - 1), Ingresos = ingresos)
# Crear la gráfica
ggplot(datos, aes(x = Año, y = Ingresos)) +
geom_line(color = "blue", size = 1) +
labs(title = "Ingresos Anuales Proyectados",
x = "Año",
y = "Ingresos (Millones de Euros)")
# Crear un data frame con los datos
datos <- data.frame(Año = seq(2023, 2023 + num_anios - 1), Ingresos = ingresos)
# Crear la gráfica de barras
ggplot(datos, aes(x = factor(Año), y = Ingresos, fill = factor(Año))) +
geom_bar(stat = "identity", color = "black", position = "dodge") +
labs(title = "Ingresos Anuales Proyectados",
x = "Año",
y = "Ingresos (Millones de Euros)") +
theme_minimal()
set.seed(123)  # Establecer una semilla para reproducibilidad
ingreso_inicial <- 0.4  # Ingreso inicial en millones de euros
tasa_crecimiento <- 0.20  # Tasa de crecimiento anual del 30%
# Crear la gráfica de barras
ggplot(datos, aes(x = factor(Año), y = Ingresos, fill = factor(Año))) +
geom_bar(stat = "identity", color = "black", position = "dodge") +
labs(title = "Ingresos Anuales Proyectados",
x = "Año",
y = "Ingresos (Millones de Euros)") +
theme_minimal()
# Crear un data frame con los datos
datos <- data.frame(Año = seq(2023, 2023 + num_anios - 1), Ingresos = ingresos)
# Crear la gráfica de barras
ggplot(datos, aes(x = factor(Año), y = Ingresos, fill = factor(Año))) +
geom_bar(stat = "identity", color = "black", position = "dodge") +
labs(title = "Ingresos Anuales Proyectados",
x = "Año",
y = "Ingresos (Millones de Euros)") +
theme_minimal()
ingreso_inicial <- 0.4  # Ingreso inicial en millones de euros
tasa_crecimiento <- 0.20  # Tasa de crecimiento anual del 30%
# Crear el vector de ingresos
ingresos <- cumprod(c(ingreso_inicial, rep(1 + tasa_crecimiento, num_anios - 1)))
# Crear un data frame con los datos
datos <- data.frame(Año = seq(2023, 2023 + num_anios - 1), Ingresos = ingresos)
# Crear la gráfica de barras
ggplot(datos, aes(x = factor(Año), y = Ingresos, fill = factor(Año))) +
geom_bar(stat = "identity", color = "black", position = "dodge") +
labs(title = "Ingresos Anuales Proyectados",
x = "Año",
y = "Ingresos (Millones de Euros)") +
theme_minimal()
set.seed(123)  # Establecer una semilla para reproducibilidad
ingreso_inicial <- 0.25  # Ingreso inicial en millones de euros
tasa_crecimiento <- 0.10  # Tasa de crecimiento anual del 30%
num_anios <- 5  # Número de años
# Crear el vector de ingresos
ingresos <- cumprod(c(ingreso_inicial, rep(1 + tasa_crecimiento, num_anios - 1)))
# Crear un data frame con los datos
datos <- data.frame(Año = seq(2023, 2023 + num_anios - 1), Ingresos = ingresos)
# Crear la gráfica de barras
ggplot(datos, aes(x = factor(Año), y = Ingresos, fill = factor(Año))) +
geom_bar(stat = "identity", color = "black", position = "dodge") +
labs(title = "Ingresos Anuales Proyectados",
x = "Año",
y = "Ingresos (Millones de Euros)") +
theme_minimal()
# Crear la gráfica de barras
ggplot(datos, aes(x = factor(Año), y = Ingresos, fill = factor(Año))) +
geom_bar(stat = "identity", color = "black", position = "dodge") +
labs(title = "Ingresos Anuales Proyectados - Pesimista",
x = "Año",
y = "Ingresos (Millones de Euros)") +
theme_minimal()
set.seed(123)  # Establecer una semilla para reproducibilidad
ingreso_inicial <- 0.4  # Ingreso inicial en millones de euros
tasa_crecimiento <- 0.20  # Tasa de crecimiento anual del 30%
num_anios <- 5  # Número de años
# Crear el vector de ingresos
ingresos <- cumprod(c(ingreso_inicial, rep(1 + tasa_crecimiento, num_anios - 1)))
# Crear un data frame con los datos
datos <- data.frame(Año = seq(2023, 2023 + num_anios - 1), Ingresos = ingresos)
# Crear la gráfica de barras
ggplot(datos, aes(x = factor(Año), y = Ingresos, fill = factor(Año))) +
geom_bar(stat = "identity", color = "black", position = "dodge") +
labs(title = "Ingresos Anuales Proyectados - Más Realista",
x = "Año",
y = "Ingresos (Millones de Euros)") +
theme_minimal()
# Crear la gráfica de barras
ggplot(datos, aes(x = factor(Año), y = Ingresos, fill = factor(Año))) +
geom_bar(stat = "identity", color = "black", position = "dodge") +
labs(title = "Ingresos Anuales Proyectados - Optimista",
x = "Año",
y = "Ingresos (Millones de Euros)") +
theme_minimal()
ingreso_inicial <- 1  # Ingreso inicial en millones de euros
tasa_crecimiento <- 0.30  # Tasa de crecimiento anual del 30%
num_anios <- 5  # Número de años
# Crear el vector de ingresos
ingresos <- cumprod(c(ingreso_inicial, rep(1 + tasa_crecimiento, num_anios - 1)))
# Crear un data frame con los datos
datos <- data.frame(Año = seq(2023, 2023 + num_anios - 1), Ingresos = ingresos)
# Crear la gráfica de barras
ggplot(datos, aes(x = factor(Año), y = Ingresos, fill = factor(Año))) +
geom_bar(stat = "identity", color = "black", position = "dodge") +
labs(title = "Ingresos Anuales Proyectados - Optimista",
x = "Año",
y = "Ingresos (Millones de Euros)") +
theme_minimal()
