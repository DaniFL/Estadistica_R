desviacion
sd = sd(pieces$length)
sd = sd(pieces)
media = mean(pieces$longitud)
media = mean(pieces)
media = mean(length(pieces))
media
desviacion = sd(length(pieces))
desviacion
desviacion = sd(pieces)
media = mean(length(pieces$piece_size_cm))
length(pieces$piece_size_cm)
media = mean(pieces$piece_size_cm)
media
desviacion = sd(pieces$piece_size_cm)
desviacion
# Construir un Intervalo Confianza
# muestra = rnorm(N, 5, sd)
sims = replicate(1000, {
confianza = 0.99
significancion = 1 - confianza
media = mean(pieces$piece_size_cm)
ic = mean(muestra) + c(-1,1) * qnorm(1 - significancion/2) * sd / sqrt(N)
# Construir un Intervalo Confianza
# muestra = rnorm(N, 5, sd)
sims = replicate(1000, {
muestra = rnorm(N, 5, sd)
confianza = 0.99
significancion = 1 - confianza
media = mean(pieces$piece_size_cm)
ic = mean(muestra) + c(-1,1) * qnorm(1 - significancion/2) * sd / sqrt(N)
})
sims
ic = mean(muestra) + c(-1,1) * qnorm(1 - significancion/2) * sd / sqrt(N)
ic
muestra
sd
sd = sd(pieces$piece_size_cm)
sd
ic = mean(muestra) + c(-1,1) * qnorm(1 - significancion/2) * sd / sqrt(N)
ic
mean(sims)
# Muestra aleatoria
N = length(pieces)
sd = sd(pieces$piece_size_cm)
# Construir un Intervalo Confianza
# muestra = rnorm(N, 5, sd)
sims = replicate(1000, {
muestra = rnorm(N, 5, sd)
confianza = 0.99
significancion = 1 - confianza
media = mean(pieces$piece_size_cm)
ic = mean(muestra) + c(-1,1) * qnorm(1 - significancion/2) * sd / sqrt(N)
})
ic = mean(muestra) + c(-1,1) * qnorm(1 - significancion/2) * sd / sqrt(N)
ic
s2 = var(pieces)
muestra = rchisq(N, 5, sd)
# Muestra aleatoria
N = length(pieces)
sd = sd(pieces$piece_size_cm)
s2 = var(pieces)
# Construir un Intervalo Confianza
# muestra = rnorm(N, 5, sd)
sims = replicate(1000, {
muestra = rchisq(N, 5, sd)
confianza = 0.99
significancion = 1 - confianza
media = mean(pieces$piece_size_cm)
ic = mean(muestra) + c(-1,1) * qnorm(1 - significancion/2) * sd / sqrt(N)
})
ic
# Muestra aleatoria
N = length(pieces)
# Muestra aleatoria
N = length(pieces)
confianza = 0.99
alpha = 1 - confianza
s2 = var(pieces)
qs = qchisq(c(1-alpha / 2, alpha / 2), df = n-1)
ic = (n-1) * s2 / qs
ic
# Muestra aleatoria
n = length(pieces)
confianza = 0.99
alpha = 1 - confianza
s2 = var(pieces)
qs = qchisq(c(1-alpha / 2, alpha / 2), df = n-1)
ic = (n-1) * s2 / qs
ic
# 3) Construir un Intervalo Confianza
# Muestra aleatoria
n = length(pieces)
confianza = 0.99
alpha = 1 - confianza
s2 = var(pieces)
qs = qchisq(c(1-alpha / 2, alpha / 2), df = n-1)
ic = (n-1) * s2 / qs
ic
pieces = pieces$piece_size_cm
# 1) Cargar los datos:
library(readr)
pieces <- read_csv("Intervalos_Conf/1-single_normal_cis/data_1/pieces.csv")
pieces = pieces$piece_size_cm
View(pieces)
# 2) Comprobar asunciones del ic
# 2.1) Normalidad -> histograma
hist(pieces)
# 3) Construir un Intervalo Confianza
# Muestra aleatoria
n = length(pieces)
confianza = 0.99
alpha = 1 - confianza
s2 = var(pieces)
qs = qchisq(c(1-alpha / 2, alpha / 2), df = n-1)
ic = (n-1) * s2 / qs
ic
library(readr)
new_york <- read_csv("Intervalos_Conf/1-single_normal_cis/data_1/new_york.csv")
View(new_york)
library(readr)
new_york <- read_csv("Intervalos_Conf/1-single_normal_cis/data_1/new_york.csv")
View(new_york)
new_york = new_york$sleep_hours
View(new_york)
new_york <- read_csv("Intervalos_Conf/1-single_normal_cis/data_1/new_york.csv")
horas_sueño = new_york$sleep_hours
# 2) Comprobar asunciones del ic
#   Podemos asumir población inf, muestra muy pequeña comparada con la población
hist(horas_sueño)
t.test(horas_sueño, conf.level = confianza)
# 3) Construir un Intervalo Confianza llamando a t.test()
confianza = 0.96
alpha = 1 - confianza
t.test(horas_sueño, conf.level = confianza)
t.test$conf.int
ttest$conf.int
ttest = t.test(horas_sueño, conf.level = confianza)
ttest$conf.int
library(readr)
homeo_weight_loss <- read_csv("Intervalos_Conf/2-single_normal_hypothesis/data_2/homeo_weight_loss.csv")
View(homeo_weight_loss)
knitr::opts_chunk$set(echo = TRUE)
homeo = homeo_weight_loss$weight_loss_kg
homeo = homeo_weight_loss$weight_loss_Kg
homeo
View(homeo)
mean(homeo)
sd(homeo)
pnorm(2, mean = 2, sd = 2.5/sqrt(n))
pnorm(2, mean = 2, sd = 2.5^2/n)
pnorm(0.037, mean = 2, sd = 2.5^2/n)
pnorm(0.037, mean = 2, sd = sqrt(2.5^2/n)
pnorm(0.037, mean = 2, sd = sqrt(2.5^2/n)
pnorm(0.037, mean = 2, sd = sqrt(2.5^2/n))
# Tamaño de la muestra:
n = length(homeo)
pnorm(0.037, mean = 2, sd = sqrt(2.5^2/n))
# P(X<=0.037):
hipotesis_nula = pnorm(0.037, mean = 2, sd = sqrt(2.5^2/n))
hist(hipotesis_nula)
hist(hipotesis_nula, type = "l")
# Probabilidad es tan baja que no concuerda con hipótesis inicial.
?p-value
# P(X<=0.037):
hipotesis_nula = pnorm(0.0037, mean = 2, sd = sqrt(2.5^2/n))
hipotesis_nula
# Media de kg perdidos:
mean(homeo)
# P(X<=0.037):
p-valor = pnorm(0.037, mean = 2, sd = sqrt(2.5^2/n))
# P(X<=0.037):
p_valor = pnorm(0.037, mean = 2, sd = sqrt(2.5^2/n))
# P(X<=0.037):
p_valor = 2 * pnorm(0.037, mean = 2, sd = sqrt(2.5^2/n))
p_valor
# 3) p-valor = > codificar H1 en t.test()
t.test(homeo, mu = 2)
t_test$p.value
# 3) p-valor = > codificar H1 en t.test()
t_test = t.test(homeo, mu = 2)
t_test$p.value
set.seed(42)
x <- rnorm(30, mean = 0, sd = 5)
print(c(
t.test(x, mu = 1)$p.value,
t.test(x, mu = -1)$p.value
))
set.seed(4)
x <- rnorm(30, mean = 0, sd = 5)
print(
t.test(x, mu = 0)$p.value
)
N <- 5000
alpha <- 0.05
sims <- replicate(N, {
# H0: mu = 0
x <- rnorm(100, mean = 0)            # Genera muestras de H0 (H0 es correcta)
test <- t.test(x, mu = 0)$p.value    # Testea H0
# Añade condición de éxito para calcular la probabilidad de
# "Rechazar H_0 a pesar de ser correcta"
# ?????????????????????????????????????????????
})
print(paste("alpha =", alpha, "| p(incorrectly reject H0) = ", mean(sims)))
knitr::opts_chunk$set(echo = TRUE)
library(readr)
homeo = homeo_weight_loss$weight_loss_Kg
# Media de kg perdidos:
mean(homeo)
# Desviacion tipica poblacional:
sigma = 2.5
# Tamaño de la muestra:
n = length(homeo)
# P(X<=0.037):
p_valor = 2 * pnorm(0.037, mean = 2, sd = sqrt(2.5^2/n))
# 3) p-valor = > codificar H1 en t.test()
t_test = t.test(homeo, mu = 2)
t_test$p.value
set.seed(42)
x <- rnorm(30, mean = 0, sd = 5)
print(c(
t.test(x, mu = 1)$p.value,
t.test(x, mu = -1)$p.value
))
# X(gorrito) - 2 / S /sqrt(n) ~ Tn-1
hist(homeo)
mean(homeo)
p_valor = pnorm(0.037, mean = 2, sd = sqrt(2.5^2/n))
media -2 / sd / sqrt(n)
sd(homeo)
media -2 / sd / sqrt(n)
(media -2) / /sd / sqrt(n))
(media -2) / (sd / sqrt(n))
media = mean(homeo)
media
p_valor = pnorm(media, mean = 2, sd = sqrt(2.5^2/n))
p_valor
View(homeo)
homeo_weight_loss <- read.csv("data/pharma_weight_loss.csv")
n = length(homeo)
n
(media -2) / (sd / sqrt(n))
(media -2) / (sd(homeo) / sqrt(n))
t.test(t_stat, df = n-1, alternative = "less")$p.value
t_stat = (media -2) / (sd(homeo) / sqrt(n)) # desviación tipica muestral (S gorrito) = sd(datos) - sd(homeo)
t.test(t_stat, df = n-1, alternative = "less")$p.value
t.test(homeo, df = n-1, alternative = "less")$p.value
p_valor = pt(t_stat, df = n-1, lower.tail = TRUE)
p_valor
t.test(homeo, mu = 2, alternative = "less")
library(readr)
pharma_weight_loss <- read_csv("Intervalos_Conf/2-single_normal_hypothesis/data_2/pharma_weight_loss.csv")
View(pharma_weight_loss)
knitr::opts_chunk$set(echo = TRUE)
pharma = pharma_weight_loss$weight_loss_Kg
library(readr)
pharma_weight_loss <- read_csv("Intervalos_Conf/2-single_normal_hypothesis/data_2/pharma_weight_loss.csv")
pharma = pharma_weight_loss$weight_loss_Kg
alpha = 0.05
# 2) Elegimos estadistico de contraste (media muestral (x gorrito)).
# Comprobamos normalidad y discutir independencia.
n = length(pharma)
alpha = 0.05
media = mean(pharma)
t_stat = (media - 0) / (sd(pharma) / sqrt(n)) # desviación tipica muestral (S gorrito) = sd(datos) - sd(homeo)
p_valor = pt(t_stat, df = n-1, lower.tail = TRUE)
p_valor
t.test(pharma, mu = 2, alternative = "less") # Por defecto parámetro alternative = "two.sided" (dos colas)
t.test(pharma, alpha, alternative = "less") # Por defecto parámetro alternative = "two.sided" (dos colas)
t.test(pharma, mu = 0, alternative = "less") # Por defecto parámetro alternative = "two.sided" (dos colas)
t.test(pharma, mu = 0.05, alternative = "less") # Por defecto parámetro alternative = "two.sided" (dos colas)
t.test(pharma, media, alternative = "less") # Por defecto parámetro alternative = "two.sided" (dos colas)
media = mean(pharma)
media
t.test(pharma, media, alternative = "less") # Por defecto parámetro alternative = "two.sided" (dos colas)
# 2) Elegimos estadistico de contraste (media muestral (x gorrito)). - Como no conocemos sd poblacional usamos t de student.(Para que esto sea cierto se debe cumplir: normalidad e independencia).
# Comprobamos normalidad y discutir independencia.
hist(pharma)
# 3) P-valor
# Ha: media real > 0
t.test(pharma, mu > 0, alternative = "greater") # Por defecto parámetro alternative = "two.sided" (dos colas)
# 3) P-valor
# Ha: media real > 0
t.test(pharma, mu > 0, alternative = "greater") # Por defecto parámetro alternative = "two.sided" (dos colas)
# 3) P-valor
# Ha: media real > 0
t.test(pharma, mu = 0, alternative = "greater") # Por defecto parámetro alternative = "two.sided" (dos colas)
hist(pharma)
abline(v = 0.5, col = "red")
hist(pharma)
abline(v = 0.5, col = "red")
hist(pharma)
abline(v = 0.5, type = h,col = "red")
cohen_d = mean(pharma) / sd(pharma))
cohen_d = mean(pharma) / sd(pharma)
cohen_d
library("easystats")
knitr::opts_chunk$set(echo = TRUE)
# 3) P-valor
# Ha: media real > 0
t_test = t.test(pharma, mu = 0, alternative = "greater") # Por defecto parámetro alternative = "two.sided" (dos colas)
effectsize(t_test)
#cohen_d = mean(pharma) / sd(pharma)
library("easystats")
effectsize(t_test)
library(readr)
iq_spanish <- read_csv("Intervalos_Conf/2-single_normal_hypothesis/data_2/iq_spanish.csv")
View(iq_spanish)
var_test = var.test(iq, sigma = 15^2, alternative = "two.sided") # Por defecto parámetro alternative = "two.sided" (dos colas)
iq = iq_spanish$iq
var_test = var.test(iq, sigma = 15^2, alternative = "two.sided") # Por defecto parámetro alternative = "two.sided" (dos colas)
var_test = var.test(iq, sigma = 15^2, alternative = "two.sided") # Por defecto parámetro alternative = "two.sided" (dos colas)
hist(iq)
# 3) P-valor y el tamaño del efecto
# Ha: sigma != 15
var_test = var.test(iq, sigma = 15 ^ 2, alternative = "two.sided") # Por defecto parámetro alternative = "two.sided" (dos colas)
r = (n-1)*sd^2/15^2
r
r = (n-1)*sd/15^2
r
n = length(iq)
sd = var(iq)
r = (n-1)*sd/15^2
r
r = (n-1)*sd^2/15^2
r
n = length(iq)
s_gorrito = var(iq)
r = (n-1)*s_gorrito/15^2
p_value = 1 - pchisq(r, df = n-1) # pchisq es la funcion de distribucion de la chi cuadrado
p_value
p_value = 1 - pchisq(r, df = n-1) # pchisq es la funcion de distribucion de la chi cuadrado
media = 2 *(1 - pchisq(r, df = n-1)) # pchisq es la funcion de distribucion de la chi cuadrado
media
n = length(iq)
s_gorrito = var(iq)
r = (n-1)*s_gorrito/15^2
media = 2 *(1 - pchisq(r, df = n-1)) # pchisq es la funcion de distribucion de la chi cuadrado
media
p_valor = 2 *(1 - pchisq(r, df = n-1)) # pchisq es la funcion de distribucion de la chi cuadrado
power_var_test <- function(n, H0_sigma2 = 15 ^ 2, true_sigma2 = 388.6902,
significance = 0.05, N = 5000) {
sims <- replicate(N, {
data <- rnorm(n, sd = sqrt(true_sigma2))
var_stat <- (n-1) * s_gorrito / H0_sigma2
p_value <- 2 *(1 - pchisq(var_stat, df = n-1))
p_value < significance
})
}
power_var_test <- function(n, H0_sigma2 = 15 ^ 2, true_sigma2 = 388.6902,
significance = 0.05, N = 5000) {
sims <- replicate(N, {
data <- rnorm(n, sd = sqrt(true_sigma2))
var_stat <- (n-1) * s_gorrito / H0_sigma2
p_value <- 2 *(1 - pchisq(var_stat, df = n-1))
p_value < significance
})
mean(sims)
}
power_var_test(10)
power_var_test <- function(n, H0_sigma2 = 15 ^ 2, true_sigma2 = 388.6902,
significance = 0.05, N = 5000) {
sims <- replicate(N, {
data <- rnorm(n, sd = sqrt(true_sigma2))
var_stat <- (n-1) * s_gorrito / H0_sigma2
p_value <- 2 *(1 - pchisq(var_stat, df = n-1))
p_value < significance
})
mean(sims)
}
power_var_test(10)
power_var_test(30)
n = length(iq)
power_var_test <- function(n, H0_sigma2 = 15 ^ 2, true_sigma2 = 388.6902,
significance = 0.05, N = 5000) {
sims <- replicate(N, {
data <- rnorm(n, sd = sqrt(true_sigma2))
var_stat <- (n-1) * s_gorrito / H0_sigma2
p_value <- 2 *(1 - pchisq(var_stat, df = n-1))
p_value < significance
})
mean(sims)
}
power_var_test(30)
# 1) Formulamos hipotesis
# X: CIs en español
# Ho: sigma = 15
# Ha: sigma != 15
# 2) Estadistico de contraste: usaremos varianza muestral (s gorrito) - chiCuadrado
library(readr)
iq_spanish <- read_csv("Intervalos_Conf/2-single_normal_hypothesis/data_2/iq_spanish.csv")
# Quiero clcular la prob de elegir Ha, si esta es cierta
# Ha: sigma^2 = 15^2
# Similar ICs donde se verifique Ha
rnorm(10, sd = sqrt(388.690)) # Genera 10 muestras de una normal con sd = sqrt(388.6902)
power_var_test <- function(n, H0_sigma2 = 15 ^ 2, true_sigma2 = 388.6902,
significance = 0.05, N = 5000) {
sims <- replicate(N, {
data <- rnorm(n, sd = sqrt(true_sigma2))
var_stat <- (n-1) * s_gorrito / H0_sigma2
p_value <- 2 *(1 - pchisq(var_stat, df = n-1))
p_value < significance
})
mean(sims)
}
# True -> p-valor < significancia == Acptamos Ha cuando esta es cierta
power_var_test(30)
ns = c(30,50,70,100)
power_var_test = Vectorize(power_var_test)
plot(ns, power_var_test(ns), type = "l")
ns = c(30,50,70,100)
power_var_test = Vectorize(power_var_test)
potencias = power_var_test(ns)
plot(ns, potencias)
power_var_test(30)
power_var_test <- function(n, H0_sigma2 = 15 ^ 2, true_sigma2 = 388.6902,
significance = 0.05, N = 5000) {
sims <- replicate(10000, {
data <- rnorm(n, sd = sqrt(true_sigma2))
var_stat <- (n-1) * s_gorrito / H0_sigma2
p_value <- 2 *(1 - pchisq(var_stat, df = n-1))
p_value < significance
})
mean(sims)
}
power_var_test(30)
ns = 65:100
potencias = power_var_test(ns)
plot(ns, potencias)
ns = 65:100
potencias = power_var_test(ns)
plot(ns, potencias)
abline(h = 0.9, col = "red")
# Quiero clcular la prob de elegir Ha, si esta es cierta
# Ha: sigma^2 = 15^2
# Similar ICs donde se verifique Ha
rnorm(10, sd = sqrt(388.690)) # Genera 10 muestras de una normal con sd = sqrt(388.6902)
power_var_test <- function(n, H0_sigma2 = 15 ^ 2, true_sigma2 = 388.6902,
significance = 0.05, N = 5000) {
sims <- replicate(N, {
data <- rnorm(n, sd = sqrt(true_sigma2))
var_stat <- (n-1) * s_gorrito / H0_sigma2
p_value <- 2 *(1 - pchisq(var_stat, df = n-1))
p_value < significance
})
mean(sims)
}
# True -> p-valor < significancia == Acptamos Ha cuando esta es cierta
power_var_test(30)
ns = c(30,50,70,100)
power_var_test = Vectorize(power_var_test)
potencias = power_var_test(ns)
plot(ns, potencias)
ns = 65:100
potencias = power_var_test(ns)
plot(ns, potencias)
abline(h = 0.9, col = "red")
power_var_test <- function(n, H0_sigma2 = 15 ^ 2, true_sigma2 = 388.6902,
significance = 0.05, N = 5000) {
sims <- replicate(N, {
data <- rnorm(n, sd = sqrt(true_sigma2))
var_stat <- ((n-1) * s_gorrito) / H0_sigma2
p_value <- 2 *(1 - pchisq(var_stat, df = n-1))
p_value < significance
})
mean(sims)
}
power_var_test(30)
ns = c(30,50,70,100)
power_var_test = Vectorize(power_var_test)
potencias = power_var_test(ns)
plot(ns, potencias)
### Potencia de un test: tamaño de la muestra
Halla ahora el número de muestras necesarias para obtener una potencia de test
```{r}
ns = 65:100
potencias = power_var_test(ns)
potencias = power_var_test(ns)
plot(ns, potencias)
abline(h = 0.9, col = "red")
n = length(iq)
power_var_test <- function(n, H0_sigma2 = 15 ^ 2, true_sigma2 = 388.6902,
significance = 0.05, N = 5000) {
sims <- replicate(N, {
data <- rnorm(n, sd = sqrt(true_sigma2))
var_stat <- ((n-1) * s_gorrito) / H0_sigma2
p_value <- 2 *(1 - pchisq(var_stat, df = n-1))
p_value < significance
})
mean(sims)
}
power_var_test(30)
ns = c(30,50,70,100)
power_var_test = Vectorize(power_var_test)
potencias = power_var_test(ns)
plot(ns, potencias)
power_var_test <- function(n, H0_sigma2 = 15 ^ 2, true_sigma2 = 388.6902,
significance = 0.05, N = 5000) {
sims <- replicate(N, {
data <- rnorm(n, sd = sqrt(true_sigma2))
var_stat <- ((n-1) * s_gorrito) / H0_sigma2
p_value <- 2 *(1 - pchisq(var_stat, df = n-1))
p_value < significance
})
#mean(sims)
}
power_var_test(30)
ns = c(30,50,70,100)
power_var_test = Vectorize(power_var_test)
potencias = power_var_test(ns)
plot(ns, potencias)
power_var_test(30)
