library(readr)
covid <- read_csv("covid.csv")
View(covid)
library(readr)
covid <- read_csv("covid.csv")
View(covid)
#' **versión 1**
countries = c("Germany", "Italy", "Portugal", "Spain")
cases = c(1337078, 1843712, 348744, 1730575) # ????????????????????????
table1 = c(countries, cases)
View(table1)
table1 = cat(countries, cases)
View(table1)
?cat
countries[1]
#' **versión 1**
countries = c("Germany", "Italy", "Portugal", "Spain")
cases = c(1337078, 1843712, 348744, 1730575)
table1 = data.frame(countries, cases)
print(table1)
table1 = cbind(countries, cases)
print(table1)
prueba = covid$cases
print(prueba)
prueba = covid$cases(covid$countriesAndTerritories = "Spain")
prueba =(covid$countriesAndTerritories = "Spain")
print(prueba)
prueba =(covid$cases = "Spain")
print(prueba)
prueba =(covid$cases = 0)
print(prueba)
prueba =(covid$cases > 0)
print(prueba)
#' Para obtener el subconjunto de Portugal y España (veremos mejores opciones más adelante)
countries[3:4]
cases[c(3, 4)] # Fíjate en las diferentes formas de construir el vector 3,4
#' **versión 2**: para mejorar lo anterior...
print(cases)
#' ... vamos a vincular countries con cases
names(cases) # Ahora mismo está vacío: NULL
names(cases) = countries # asignamos nombres a los slots del vector
print(cases)
df = data.frame(
"nombre" = c("Juan", "Alicia"),
"apellidos" = c("García", "Pérez")
)
print(df)
#' Para obtener el subconjunto de Portugal (veremos mejores opciones más adelante)
countries[3]
cases[3]
#' **versión 1**
countries = c("Germany", "Italy", "Portugal", "Spain")
cases = c(1337078, 1843712, 348744, 1730575)
library(readr)
covid <- read_csv("covid.csv")
View(covid)
#' **versión 1**
countries = c("Germany", "Italy", "Portugal", "Spain")
cases = c(1337078, 1843712, 348744, 1730575)
table1 = cbind(countries, cases)
print(table1)
#' Para obtener el subconjunto de Portugal (veremos mejores opciones más adelante)
countries[3]
cases[3]
#' Para obtener el subconjunto de España (veremos mejores opciones más adelante)
countries[4]
cases[4]
#' Para obtener el subconjunto de Portugal y España (veremos mejores opciones más adelante)
countries[3:4]
cases[c(3, 4)] # Fíjate en las diferentes formas de construir el vector 3,4
#' **versión 2**: para mejorar lo anterior...
print(cases)
#' ... vamos a vincular countries con cases
names(cases) # Ahora mismo está vacío: NULL
names(cases) = countries # asignamos nombres a los slots del vector
print(cases)
#' ¡Ahora la variable países ya no es útil porque los slots se pueden indexar
#'  tanto con números como con nombres!
# Casos de Portugal:
cases["Portugal"]
cases["Spain"]
# Tanto Portugal como España:
cases["Spain", "Portugal"]
# Tanto Portugal como España:
cases[3,4]
#' ¡Ahora la variable países ya no es útil porque los slots se pueden indexar
#'  tanto con números como con nombres!
# Casos de Portugal:
cases["Portugal"]
# Casos de España:
cases["Spain"]
# Tanto Portugal como España:
cases[1]
#' Compara:
cases[["Spain"]]
cases["Spain"]
# Tanto Portugal como España:
cases[c("Spain", "Portugal")]
#' Para lo siguiente, restablezcamos el vector de casos al original.
names(cases) = NULL
print(cases)
df = data.frame(
"nombre" = c("Juan", "Alicia"),
"apellidos" = c("García", "Pérez")
)
print(df)
#' **versión 1**
countries = c("Germany", "Italy", "Portugal", "Spain")
cases = c(1337078, 1843712, 348744, 1730575)
table1 = cbind(countries, cases)
print(table1)
#' ¿Como crearías un data.frame con columnas llamadas 'nombre_del_pais' y 'numero_de_casos'?
df1 = data.frame(
"nombre_del_pais" = c("Juan", "Alicia"),
"numero_de_casos" = c("García", "Pérez")
)
print(df1)
#' ¿Como crearías un data.frame con columnas llamadas 'nombre_del_pais' y 'numero_de_casos'?
df1 = data.frame(
"nombre_del_pais" = c("Germany", "Italy", "Portugal", "Spain"),
"numero_de_casos" = c(1337078, 1843712,  348744, 1730575)
)
print(df1)
#' Los data.frames tienen dos dimensiones: filas y columnas. Por lo tanto, para
#' extraer datos tenemos que usar dos índices. Por ejemplo, extraigamos el
#' número de casos de Portugal.
df[3, 2]
#' Los data.frames tienen dos dimensiones: filas y columnas. Por lo tanto, para
#' extraer datos tenemos que usar dos índices. Por ejemplo, extraigamos el
#' número de casos de Portugal.
df1[3, 2]
print(df1)
#' Los data.frames tienen dos dimensiones: filas y columnas. Por lo tanto, para
#' extraer datos tenemos que usar dos índices. Por ejemplo, extraigamos el
#' número de casos de Portugal.
df1[3, 2]
df1[3,]
df1[3, ]
#' ¿Cómo extraerías los casos para España?
df1[4,2]
df1[4, ]
#' Para hacer más evidente que los datos se refieren a Portugal o España puedes
#' seleccionar toda la fila:
df[3, ] # Portugal
#' Para hacer más evidente que los datos se refieren a Portugal o España puedes
#' seleccionar toda la fila:
df1[3, ] # Portugal
#' El truco del "no-índice" también funciona para columnas
df1[, 1] # todos los países
df1[, 2] # todos los casos
print(df1)
#' Sin embargo, acceder a las columnas es tan útil (lo veremos más adelante) que
#' se puede usar la sintaxis $
df1$nombre_del_pais # países
df1$numero_de_casos # casos
#' Esta sintaxis es más legible que usar df[, 1]. Para hacerlo aún mejor es
#' es una buena idea utilizar nombres cortos y significativos. Cambiemos los
#' nombres de las columnas de df para hacerlos más cortos:
colnames(df1) = c("pais", "casos")
print(df)
print(df1)
library(readr)
covid <- read_csv("covid.csv")
View(covid)
View(data)
library(readr)
data = read.csv("covid.csv")
View(data)
View(data)
View(new_data)
View(data)
data = read.csv("covid.csv")
View(data)
View(new_data)
library(readr)
data = read.csv("covid.csv")
View(data)
View(data)
new_data = data[ ,c("day", "month", "year", "cases", "deaths", "countriesAndTerritories", "Cumulative_number_for_14_days_of_COVID.19_cases_per_100000")]
View(new_data)
new_data2 = data
View(new_data2)
View(data)
View(df1)
View(df1)
new_data$time = new_data$day + (new_data$month - 1) * 30 + (new_data$year - 2019) * 365
?with
with(covid19, day + (month - 1) * 30 + (year - 2019) * 365)
with(covid, day + (month - 1) * 30 + (year - 2019) * 365)
new_data$time = new_data$day + (new_data$month - 1) * 30 + (new_data$year - 2019) * 365
with(covid, day + (month - 1) * 30 + (year - 2019) * 365)
?with
#eliminamos las columnas day, month y year
new_data2 = new_data2[-1,-2,-3]
#eliminamos las columnas day, month y year
new_data$day = NULL
new_data2 = new_data[ , c(-1,-2,-3)]
new_data = new_data[ , c(-1, -2)]
#' ### Ejercicio 3
#' Dibuja la variable 'cumul_rate' frente al 'time' tanto para España como para
#' Portugal. Procede como sigue:
#'
#' 1) crea un data.frame con los datos de España (nómbralo 'spain') y luego
#' crea otro de Portugal ('portugal').
#' 2) Utiliza la función 'plot'.
#'
spain = new_data[new_data$country == 'Spain', ]
View(spain)
colnames(new_data)[6,7] = c("Countries", "Cumul_rate")
colnames(new_data)[6:7] = c("Countries", "Cumul_rate")
colnames(new_data2)[6:7] = c("Countries", "Cumul_rate")
colnames(new_data2)[2:3] = c("Countries", "Cumul_rate")
colnames(new_data)[3:4] = c("Countries", "Cumul_rate")
#' ### Ejercicio 3
#' Dibuja la variable 'cumul_rate' frente al 'time' tanto para España como para
#' Portugal. Procede como sigue:
#'
#' 1) crea un data.frame con los datos de España (nómbralo 'spain') y luego
#' crea otro de Portugal ('portugal').
#' 2) Utiliza la función 'plot'.
#'
spain = new_data[new_data$Country == "Spain", ]
View(spain)
spain = new_data[new_data$Country == "Spain", ]
View(spain)
España = new_data[new_data$Country == "Spain", ]
portugal = new_data[new_data$Country == 'Portugal', ]
View(portugal)
spain = new_data[new_data$Country == "spain", ]
View(spain)
spain = new_data2[new_data2$Country == "spain", ]
View(spain)
spain = new_data2[new_data2$Country == "Spain", ]
View(spain)
portugal = new_data[new_data$Country == 'Portugal', ]
View(portugal)
spain = new_data2[new_data2$Countries == "Spain", ]
spain = new_data[new_data$Countries == "Spain", ]
View(spain)
portugal = new_data[new_data$Countries == 'Portugal', ]
spain = new_data[new_data$Countries == "Spain", ]
portugal = new_data[new_data$Countries == 'Portugal', ]
# Especificamos un ylim grande para que los datos de Portugal quepan en el plot
plot(
spain$time, spain$Cumul_rate,
type = 'l',
xlab = 'Days from 1/1/2019',
ylab = 'Cumulative rate',
main = 'Covid-19',
ylim = c(0, 1000)
)
# Especificamos un ylim grande para que los datos de Portugal quepan en el plot
plot(
spain$time, spain$Cumul_rate,
type = 'l',
xlab = 'Days from 1/1/2019',
ylab = 'Cumulative rate',
main = 'Covid-19',
ylim = c(0, 1000)
)
# points añade un nuevo gráfico a uno ya existente. lty significa tipo de línea (line type)
points(
portugal$time, portugal$cumul_rate,
type = 'l',
col = 2,
lty = 2
)
# points añade un nuevo gráfico a uno ya existente. lty significa tipo de línea (line type)
points(
portugal$time, portugal$Cumul_rate,
type = 'l',
col = 2,
lty = 2
)
# ¡Es una buena idea usar leyendas!
legend('topleft', c('Spain', 'Portugal'), col = c(1, 2), lty = c(1, 2))
