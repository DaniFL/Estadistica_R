)
}
color = color + 1
}
color
criptomonedas = c("BTC", "ETH", "DOGE", "ADA")
col_counter = 1
for (monedas in criptomonedas){
crip = new_crypto[new_crypto$crypto == criptomonedas, ]
if(color == 1){
plot(
crip$date, log(crip$high),
type = 'l',
xlab = 'Time',
ylab = 'Price',
col = col_counter,
ylim = c(0, 15),
main = 'Cryptos'
)
}else{
points(
crip$date, log(crip$high),
type = 'l',
col = col_counter
)
}
col_counter = col_counter + 1
}
legend('topright', legend = criptomonedas, col = 1:length(criptomonedas),
lwd = 2)
View(crip)
criptomonedas = c("BTC", "ETH", "DOGE", "ADA")
col_counter = 1
for (monedas in criptomonedas){
crip = new_crypto[new_crypto$crypto == criptomonedas, ]
if(color == 1){
plot(
crip$date, log(crip$high),
type = 'l',
xlab = 'Time',
ylab = 'Price',
col = col_counter,
ylim = c(0, 15),
main = 'Cryptos'
)
}else{
points(
crip$date, log(crip$high),
type = 'l',
col = col_counter
)
}
col_counter = col_counter + 1
}
crypto_large = read.csv("crypto.csv")
#' ### Ejercicio 1
#' ### Ejercicio 1
#' El data.frame cargado consiste en:
#'
#' ### Ejercicio 1
#' El data.frame cargado consiste en:
#'
#' * `unix_time`: es una forma de medir el tiempo relacionada con el sistema operativo
#' Unix. Mide el tiempo pasado desde el 1 de enero de 1970.
#' ### Ejercicio 1
#' El data.frame cargado consiste en:
#'
#' * `unix_time`: es una forma de medir el tiempo relacionada con el sistema operativo
#' Unix. Mide el tiempo pasado desde el 1 de enero de 1970.
#' * `candlestick_low, high, open, close`: precios mínimo, máximo, de apertura y cierre
#' de la criptomoneda para para un día concreto (en dólares). Estos precios se emplean para
#' ### Ejercicio 1
#' El data.frame cargado consiste en:
#'
#' * `unix_time`: es una forma de medir el tiempo relacionada con el sistema operativo
#' Unix. Mide el tiempo pasado desde el 1 de enero de 1970.
#' * `candlestick_low, high, open, close`: precios mínimo, máximo, de apertura y cierre
#' de la criptomoneda para para un día concreto (en dólares). Estos precios se emplean para
#' hacer "análisis de velas" (si te interesa invertir, puedes leer más [aquí](https://www.investopedia.com/trading/candlestick-charting-what-is-it/).
#' * `USD_volume`: cantidad de criptomoneda que se ha cambiado a dólares americanos.
#' ### Ejercicio 1
#' El data.frame cargado consiste en:
#'
#' * `unix_time`: es una forma de medir el tiempo relacionada con el sistema operativo
#' Unix. Mide el tiempo pasado desde el 1 de enero de 1970.
#' * `candlestick_low, high, open, close`: precios mínimo, máximo, de apertura y cierre
#' de la criptomoneda para para un día concreto (en dólares). Estos precios se emplean para
#' hacer "análisis de velas" (si te interesa invertir, puedes leer más [aquí](https://www.investopedia.com/trading/candlestick-charting-what-is-it/).
#' * `USD_volume`: cantidad de criptomoneda que se ha cambiado a dólares americanos.
#' * `crypto`: nombre de la criptomoneda.
#'
#'
#' * `unix_time`: es una forma de medir el tiempo relacionada con el sistema operativo
#' Unix. Mide el tiempo pasado desde el 1 de enero de 1970.
#' * `candlestick_low, high, open, close`: precios mínimo, máximo, de apertura y cierre
#' de la criptomoneda para para un día concreto (en dólares). Estos precios se emplean para
#' hacer "análisis de velas" (si te interesa invertir, puedes leer más [aquí](https://www.investopedia.com/trading/candlestick-charting-what-is-it/).
#' * `USD_volume`: cantidad de criptomoneda que se ha cambiado a dólares americanos.
#' * `crypto`: nombre de la criptomoneda.
#'
#' Simplifica el data.frame quedándote con las columnas: `unix_time`, `candlestick_high`,
#' `candlestick_low` y `crypto`. Simplifica los nombres `candlestick_xxxx` a `high` y `low`.
View(crypto_large)
colnames(new_crypto)[2:3] = c("low", "high")
new_crypto$date = as.POSIXct(new_crypto$unix_time, origin = "1970-01-01")
eth = new_crypto[new_crypto$crypto == "ETH", ]
btc = new_crypto[new_crypto$crypto == "BTC", ]
plot(
eth$date, log(eth$high),
type = 'l',
col = 3,
xlab = 'Time',
ylab = 'Price',
ylim = c(7, 15),
main = 'Cryptos ETH / BTC'
)
points(
btc$date, log(btc$high),
type = 'l',
col = 2,
)
legend('topright', c('ETH', 'BTC'), col = c(3, 2), lty = 1)
doge = new_crypto[new_crypto$crypto == "DOGE", ]
ada = new_crypto[new_crypto$crypto == "ADA", ]
criptomonedas = c("BTC", "ETH", "DOGE", "ADA")
col_counter = 1
for (monedas in criptomonedas){
crip = new_crypto[new_crypto$crypto == criptomonedas, ]
if(color == 1){
plot(
crip$date, log(crip$high),
type = 'l',
xlab = 'Time',
ylab = 'Price',
col = col_counter,
ylim = c(0, 15),
main = 'Cryptos'
)
}else{
points(
crip$date, log(crip$high),
type = 'l',
col = col_counter
)
}
col_counter = col_counter + 1
}
legend('topright', legend = criptomonedas, col = 1:length(criptomonedas),
lwd = 2)
View(new_crypto)
criptomonedas = c("BTC", "ETH", "DOGE", "ADA")
col_counter = 1
for (monedas in criptomonedas){
crip = new_crypto[new_crypto$crypto == monedas, ]
if(color == 1){
plot(
crip$date, log(crip$high),
type = 'l',
xlab = 'Time',
ylab = 'Price',
col = col_counter,
ylim = c(0, 15),
main = 'Cryptos'
)
}else{
points(
crip$date, log(crip$high),
type = 'l',
col = col_counter
)
}
col_counter = col_counter + 1
}
legend('topright', legend = criptomonedas, col = 1:length(criptomonedas),
lwd = 2)
criptomonedas = c("BTC", "ETH", "DOGE", "ADA")
col_counter = 1
for (monedas in criptomonedas){
crip = new_crypto[new_crypto$crypto == monedas, ]
if(color_counter == 1){
plot(
crip$date, log(crip$high),
type = 'l',
xlab = 'Time',
ylab = 'Price',
col = col_counter,
ylim = c(0, 15),
main = 'Cryptos'
)
}else{
points(
crip$date, log(crip$high),
type = 'l',
col = col_counter
)
}
col_counter = col_counter + 1
}
criptomonedas = c("BTC", "ETH", "DOGE", "ADA")
col_counter = 1
for (monedas in criptomonedas){
crip = new_crypto[new_crypto$crypto == monedas, ]
if(col_counter == 1){
plot(
crip$date, log(crip$high),
type = 'l',
xlab = 'Time',
ylab = 'Price',
col = col_counter,
ylim = c(0, 15),
main = 'Cryptos'
)
}else{
points(
crip$date, log(crip$high),
type = 'l',
col = col_counter
)
}
col_counter = col_counter + 1
}
legend('topright', legend = criptomonedas, col = 1:length(criptomonedas),
lwd = 2)
View(new_crypto)
criptomonedas = c("BTC", "ETH", "DOGE", "ADA")
col_counter = 1
for (monedas in criptomonedas){
crip = new_crypto[new_crypto$crypto == monedas, ]
if(col_counter == 1){
plot(
crip$date, log(crip$high),
type = 'l',
xlab = 'Time',
ylab = 'Price',
col = col_counter,
ylim = c(0, 50),
main = 'Cryptos'
)
}else{
points(
crip$date, log(crip$high),
type = 'l',
col = col_counter
)
}
col_counter = col_counter + 1
}
criptomonedas = c("BTC", "ETH", "DOGE", "ADA")
col_counter = 1
for (monedas in criptomonedas){
crip = new_crypto[new_crypto$crypto == monedas, ]
if(col_counter == 1){
plot(
crip$date, log(crip$high),
type = 'l',
xlab = 'Time',
ylab = 'Price',
col = col_counter,
ylim = c(-10, 15),
main = 'Cryptos'
)
}else{
points(
crip$date, log(crip$high),
type = 'l',
col = col_counter
)
}
col_counter = col_counter + 1
}
criptomonedas = c("BTC", "ETH", "DOGE", "ADA")
col_counter = 1
for (monedas in criptomonedas){
crip = new_crypto[new_crypto$crypto == monedas, ]
if(col_counter == 1){
plot(
crip$date, log(crip$high),
type = 'l',
xlab = 'Time',
ylab = 'Price',
col = col_counter,
ylim = c(-5, 15),
main = 'Cryptos'
)
}else{
points(
crip$date, log(crip$high),
type = 'l',
col = col_counter
)
}
col_counter = col_counter + 1
}
legend('topright', legend = criptomonedas, col = 1:length(criptomonedas),
lwd = 2)
plot(
eth$date, log(eth$high),
type = 'l',
col = 3,
xlab = 'Time',
ylab = 'Price',
ylim = c(7, 15),
main = 'Cryptos ETH / BTC'
)
points(
btc$date, log(btc$high),
type = 'l',
col = 2,
)
legend('topright', c('ETH', 'BTC'), col = c(3, 2), lty = 1)
criptomonedas = c("BTC", "ETH", "DOGE", "ADA")
col_counter = 1
for (monedas in criptomonedas){
crip = new_crypto[new_crypto$crypto == monedas, ]
if(col_counter == 1){
plot(
crip$date, log(crip$high),
type = 'l',
xlab = 'Time',
ylab = 'Price',
col = col_counter,
ylim = c(-5, 15),
main = 'Cryptos'
)
}else{
points(
crip$date, log(crip$high),
type = 'l',
col = col_counter
)
}
col_counter = col_counter + 1
}
legend('topright', legend = criptomonedas, col = 1:length(criptomonedas),
lwd = 2)
results2 = sapply(countries, count_cases_in_country, df = new_data)
print(results2)
View(df)
calculate_drop = function(new_crypto, criptomonedas){
data_crypto = new_crypto[new_crypto$crypto == criptomonedas, ]
frac{\max{(high)} - \min{(low)}}{\max{(high)}}
calculate_drop = function(new_crypto, criptomonedas){
data_crypto = new_crypto[new_crypto$crypto == criptomonedas, ]
frac{max{(high)} - min{(low)}}{max{(high)}}
calculate_drop = function(new_crypto, criptomonedas){
data_crypto = new_crypto[new_crypto$crypto == criptomonedas, ]
frac{{max{(high)} - min{(low)}}{max{(high)}}}
calculate_drop = function(new_crypto, criptomonedas){
data_crypto = new_crypto[new_crypto$crypto == criptomonedas, ]
\frac{\max{(high)} - \min{(low)}}{\max{(high)}}
calculate_drop = function(new_crypto, criptomonedas){
data_crypto = new_crypto[new_crypto$crypto == criptomonedas, ]
r = frac{\max{(high)} - \min{(low)}}{\max{(high)}}
calculate_drop = function(df3, monedas){
data_crypto = df3[df3$crypto == monedas, ]
a = (max(df3$high) - min(df3$low)) / max(df3$high)
}
ej5 = sapply(criptomonedas, calculate_drop, df3 = new_data)
calculate_drop = function(df3, monedas){
data_crypto = df3[df3$crypto == monedas, ]
print(max(df3$high) - min(df3$low)) / max(df3$high)
}
ej5 = sapply(criptomonedas, calculate_drop, df3 = new_data)
calculate_drop = function(df3, monedas){
data_crypto = df3[df3$crypto == monedas, ]
print(max(df3$high) - min(df3$low)) / max(df3$high)
}
ej5 = sapply(criptomonedas, calculate_drop, df3 = new_crypto)
results2 = sapply(countries, count_cases_in_country, df = new_data)
print(results2)
print(country)
print(countries)
calculate_drop = function(df3, monedas){
data_crypto = df3[df3$crypto == monedas, ]
volatilidad = (max(high) - min(low)) / max(high)
}
calculate_drop(new_crypto, "BTC")
calculate_drop = function(df3, monedas){
data_crypto = df3[df3$crypto == monedas, ]
volatilidad = (max(df3$high) - min(df3$low)) / max(df3$high)
}
calculate_drop(new_crypto, "BTC")
calculate_drop = function(df3, monedas){
data_crypto = df3[df3$crypto == monedas, ]
volatilidad = (max(df3$high) - min(df3$low)) / max(df3$high)
print(volatilidad)
}
calculate_drop(new_crypto, "BTC")
calculate_drop(new_crypto, "ETH")
calculate_drop(new_crypto, "DOGE")
calculate_drop(new_crypto, "ADA")
ej5 = sapply(criptomonedas, calculate_drop, df3 = new_crypto)
ej5 = sapply(monedas, calculate_drop, df3 = new_crypto)
print(ej5)
ej5 = sapply(criptomonedas, calculate_drop, df3 = new_crypto)
print(ej5)
calculate_drop = function(df3, moneda){
data_crypto = df3[df3$crypto == moneda, ]
volatilidad = (max(df3$high) - min(df3$low)) / max(df3$high)
print(volatilidad)
}
ej5 = sapply(criptomonedas, calculate_drop, df3 = new_crypto)
calculate_drop = function(df3, moneda){
data_crypto = df3[df3$crypto == moneda, ]
volatilidad = (max(data_crypto$high) - min(data_crypto$low)) / max(data_crypto$high)
print(volatilidad)
}
ej5 = sapply(criptomonedas, calculate_drop, df3 = new_crypto)
print(ej5)
nuevo_plot = nuevo_plot$volatilidad
nuevo_plot = new_crypto$volatilidad
View(nuevo_plot)
nuevo_plot = new_crypto
View(nuevo_plot)
nuevo_plot$volatilidad
View(nuevo_plot)
calculate_drop = function(df3, moneda){
data_crypto = df3[df3$crypto == moneda, ]
volatilidad = (max(data_crypto$high) - min(data_crypto$low)) / max(data_crypto$high)
print(volatilidad)
}
ej5 = sapply(criptomonedas, calculate_drop, df3 = new_crypto)
print(ej5)
calculate_drop = function(df3, moneda){
data_crypto = df3[df3$crypto == moneda, ]
volatilidad = (max(data_crypto$high) - min(data_crypto$low)) / max(data_crypto$high)
}
ej5 = sapply(criptomonedas, calculate_drop, df3 = new_crypto)
print(ej5)
eth = new_crypto[new_crypto$crypto == "ETH", ]
btc = new_crypto[new_crypto$crypto == "BTC", ]
plot(
eth$date, log(eth$high),
type = 'l',
col = 3,
xlab = 'Time',
ylab = 'Price',
ylim = c(7, 15),
main = 'Cryptos ETH / BTC'
)
points(
btc$date, log(btc$high),
type = 'l',
col = 2,
)
legend('topright', c('ETH', 'BTC'), col = c(3, 2), lty = 1)
criptomonedas = c("BTC", "ETH", "DOGE", "ADA")
col_counter = 1
for (monedas in criptomonedas){
crip = new_crypto[new_crypto$crypto == monedas, ]
if(col_counter == 1){
plot(
crip$date, log(crip$high),
type = 'l',
xlab = 'Time',
ylab = 'Price',
col = col_counter,
ylim = c(-5, 15),
main = 'Cryptos'
)
}else{
points(
crip$date, log(crip$high),
type = 'l',
col = col_counter
)
}
col_counter = col_counter + 1
}
legend('topright', legend = criptomonedas, col = 1:length(criptomonedas),
lwd = 2)
source("~/Library/CloudStorage/OneDrive-FundaciónUniversitariaSanPabloCEU/Universidad/2º/1ºCuatri/ESTADÍSTICA/2023-2024/R0/crypto.R")
calculate_drop = function(df3, moneda){
data_crypto = df3[df3$crypto == moneda, ]
volatilidad = (max(data_crypto$high) - min(data_crypto$low)) / max(data_crypto$high)
}
ej5 = sapply(criptomonedas, calculate_drop, df3 = new_crypto)
print(ej5)
install.packages("XQartz")
doge = new_crypto[new_crypto$crypto == "DOGE", ]
ada = new_crypto[new_crypto$crypto == "ADA", ]
criptomonedas = c("BTC", "ETH", "DOGE", "ADA")
col_counter = 1
for (monedas in criptomonedas){
crip = new_crypto[new_crypto$crypto == monedas, ]
if(col_counter == 1){
plot(
crip$date, log(crip$high),
type = 'l',
xlab = 'Time',
ylab = 'Price',
col = col_counter,
ylim = c(-5, 15),
main = 'Cryptos'
)
}else{
points(
crip$date, log(crip$high),
type = 'l',
col = col_counter
)
}
col_counter = col_counter + 1
}
legend('topright', legend = criptomonedas, col = 1:length(criptomonedas),
lwd = 2)
calculate_drop = function(df3, moneda){
data_crypto = df3[df3$crypto == moneda, ]
volatilidad = (max(data_crypto$high) - min(data_crypto$low)) / max(data_crypto$high)
}
ej5 = sapply(criptomonedas, calculate_drop, df3 = new_crypto)
print(ej5)
